---
layout:     post
title:      "JavaScript闭包（入门版）"
date:       2019-01-08

categories:
    - JavaScript
tags:
    - JavaScript
---


# 1.JavaScript闭包概述

    闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。
    当一个函数能够记住并访问到其所在的词法作用域及作用域链，
    特别强调是在其定义的作用域外进行的访问，此时该函数和其上层执行上下文共同构成闭包。（词法作用域下一篇会讲到）
<!-- more -->
# 2.闭包的特性

> 闭包有三个特性：

    1.函数嵌套函数
    2.函数内部可以引用外部的参数和变量
    3.闭包和词法作用域，作用域链，垃圾回收机制息息相关。参数和变量不会被垃圾回收机制回收
    4.闭包一定是函数对象
    5.当函数一定是在其定义的作用域外进行的访问时，才产生闭包。
    6.闭包是由该函数和其上层执行上下文共同构成。

# 3.闭包的定义及其优缺点

>定义

    闭包 是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，
    通过另一个函数访问这个函数的局部变量

>缺点

    闭包的缺点就是常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。
>应用场合、作用

    1.闭包是javascript语言的一大特点，主要应用闭包场合主要是为了：
    设计私有的方法和变量。

    一般函数执行完毕后，局部活动对象就被销毁，内存中仅仅保存全局作用域。但闭包的情况不同！

    2.解决了函数嵌套问题


# 4.嵌套函数的闭包

    function aaa() {
        var a = 1;
        return function(){
            alert(a++)
        };
    }
    var fun = aaa();
    fun();// 1 执行后 a++，，然后a还在~
    fun();// 2
    fun = null;//a被回收！！
>备注 因为闭包每次都是执行的aaa() 返回的function 所以不会对a进行重新赋值。

>闭包会使变量始终保存在内存中，如果不当使用会增大内存消耗。

# 5.javascript的垃圾回收原理

    1.在javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收；

    2.如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。

>闭包回收

    我们现在都知道了闭包阻止了垃圾回收机制对变量进行回收，因此变量会永远存在内存中，即使当变量不再被使用时，
    这样会造成内存泄漏，会严重影响页面的性能。因此当变量对象不再适用时，我们要将其释放。

    baz=null;
    把变量置空就会回收了。



# 6.使用闭包的好处

>那么使用闭包有什么好处呢？使用闭包的好处是：

    1.希望一个变量长期驻扎在内存中
    2.避免全局变量的污染
    3.私有成员的存在
    4.函数嵌套问题

# 7.简单面试题

     for (var i = 0; i < 5; i++) {
        setTimeout(() => {
            console.log(i);
        }, 0)
    }
    都输出5，因为var提升了全局变量如果用let有作用域就不会有这个问题

    使用闭包实现，让输出 0 1 2 3 4
    for (var i = 0; i < 5; i++){
        ((i)=>{
            setTimeout(() => {
                console.log(i);
            }, 0)
        })(i)
    }

>如有侵权行为，请[点击这里](https://github.com/cooper-q/MattMeng_hexo/issues)联系我删除

>[如发现疑问或者错误点击反馈](https://github.com/cooper-q/MattMeng_hexo/issues)
